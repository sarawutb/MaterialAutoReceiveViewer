@page "/"
@using Material_Auto_Receive_Viewer.Models;
@using Material_Auto_Receive_Viewer.Pages.Widget;
@using Material_Auto_Receive_Viewer.ViewModels;
@using Material_Auto_Receive_Viewer.ViewModels.Imprement;
@using Setting;
@using Material_Auto_Receive_Viewer.ViewModels.Imprement;
@inherits MvvmComponentBase<IndexViewModel>
<PageTitle>@AppSetting.AppNameCombine("Dashboard")</PageTitle>

@{
    int PageNumber = 0;
}
<h1>Dashboard</h1>
<div class="row ">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">กรองค้นหา</h4>
                <div class="row">
                    <div class="col-md-3 col-sm-6">
                        <Field>
                            <FieldLabel>Start date</FieldLabel>
                            <FieldBody>
                                <DatePicker Disabled="string.IsNullOrEmpty(ViewModel.DocNoSearch) ? false : true" @bind-Date="ViewModel.DateStart" Class="form-control" DisplayFormat="dd/MM/yyyy" Placeholder="dd /mm/yyyy" />
                            </FieldBody>
                            <FieldHelp>Format: dd/mm/yyyy</FieldHelp>
                        </Field>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <Field>
                            <FieldLabel>End date</FieldLabel>
                            <FieldBody>
                                <DatePicker Disabled="string.IsNullOrEmpty(ViewModel.DocNoSearch) ? false : true" @bind-Date="ViewModel.DateEnd" Class="form-control" DisplayFormat="dd/MM/yyyy" Placeholder="dd /mm/yyyy" />
                            </FieldBody>
                            <FieldHelp>Format: dd/mm/yyyy</FieldHelp>
                        </Field>
                    </div>
                    <div class="col-md-4">
                        <Field>
                            <FieldLabel>Doc No</FieldLabel>
                            <FieldBody>
                                <div class="input-group">
                                    <input type="text" @bind-value="ViewModel.DocNoSearch" class="form-control" placeholder="Doc No" aria-label="Dco No Plan" aria-describedby="basic-addon2">
                                    <div class="input-group-append">
                                        <button @onclick="GetMaterialReceivePlanMstAsync" class="btn btn-sm btn-primary" type="button">Search</button>
                                    </div>
                                </div>
                            </FieldBody>
                        </Field>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@{
    if (ViewModel.MaterialReceivePlanMstData != null && ViewModel.MaterialReceivePlanMstData.Count > 0)
    {
        <div class="row ">
            <div class="col-12 grid-margin">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Material Receive Plan</h4>
                        <DataGrid TItem="MaterialReceivePlanMstModel"
                                  Data="ViewModel.MaterialReceivePlanMstData"
                                  SelectionMode="DataGridSelectionMode.Single"
                                  @bind-SelectedRow="@selectedItem"
                                  Editable
                                  ShowCaptions
                                  ShowDefaultSortIcon
                                  ShowPager
                                  ShowPageSizes
                                  PagerPosition="DataGridPagerPosition.Bottom"
                                  PagerOptions="new(){ ButtonSize=Size.Small }"
                                  Responsive>
                            <DataGridColumns>
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.DocNoMobileShow)" Caption="Doc No" Sortable="true">
                                    <DisplayTemplate>
                                        @{
                                            var data = (context as MaterialReceivePlanMstModel);
                                            LstDocNoMobileShow = data.DocNoMobileShow.Split(":").ToList();
                                            var hrefToPage = string.Empty;
                                            if (context.typeSuplierId == 1)
                                            {
                                                hrefToPage = string.Format("/PickingDetail/{0}/{1}/{2}", context.documentRequestNo, context.ownerSite, context.receiveSite);
                                            }
                                            else
                                            {
                                                hrefToPage = string.Format("/ReceiveDetail/{0}/{1}/{2}", context.documentRequestNo, context.ownerSite, context.receiveSite);
                                            }
                                        }
                                        <NavLink href="@hrefToPage" class="btn btn-primary btn-rounded btn-fw">@context.documentRequestNo</NavLink>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.DocNoMobileShow)" Caption="Doc No Remark" Sortable="true">
                                    <DisplayTemplate>
                                        <span>@LstDocNoMobileShow.FirstOrDefault()</span>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.ownerSiteName)" Caption="Owner Site" Sortable="true" />
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.OperationSiteName)" Caption="Operation Site" Sortable="true" />
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.receiveSiteShortName)" Caption="Receive Site " Sortable="true" />
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.suppName)" Caption="Supp Name" Sortable="true" />
                                <DataGridNumericColumn Field="@nameof(MaterialReceivePlanMstModel.typeRM)" Caption="Type RM" Sortable="true">
                                    <DisplayTemplate>
                                        @{
                                            var typeRM = (context as MaterialReceivePlanMstModel).typeSuplierId == 1 ? "Picking" : "Receive";
                                        }
                                        @typeRM
                                    </DisplayTemplate>
                                </DataGridNumericColumn>
                                <DataGridColumn Field="@nameof(MaterialReceivePlanMstModel.createBy)" Caption="Create By" Sortable="true" />
                                <DataGridNumericColumn Field="@nameof(MaterialReceivePlanMstModel.receivePlanMstStatus)" Caption="Status" Sortable="true">
                                    <DisplayTemplate>
                                        @{
                                            var data = (context as MaterialReceivePlanMstModel);

                                            if (data.receivePlanMstStatus == 1)
                                            {
                                                <div class="badge badge-outline-info">รอดำเนินการ</div>
                                            }
                                            else if (data.receivePlanMstStatus == 2)
                                            {
                                                <div class="badge badge-outline-warning">กำลังดำเนินการ</div>
                                            }
                                            else if (data.receivePlanMstStatus == 3)
                                            {
                                                <div class="badge badge-outline-success">ดำเนินการเสร็จสิ้น</div>
                                            }
                                        }
                                    </DisplayTemplate>
                                </DataGridNumericColumn>

                            </DataGridColumns>
                            <PageButtonTemplate>
                                <Span>
                                    @{
                                        PageNumber = context.PageNumber;
                                    }
                                    @context.PageNumber
                                </Span>
                            </PageButtonTemplate>
                            <NextPageButtonTemplate>
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleRight" />
                            </NextPageButtonTemplate>
                            <PreviousPageButtonTemplate>
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleLeft" />
                            </PreviousPageButtonTemplate>
                            <LastPageButtonTemplate>
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleDoubleRight" />
                            </LastPageButtonTemplate>
                            <FirstPageButtonTemplate>
                                <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleDoubleLeft" />
                            </FirstPageButtonTemplate>
                            @*<TotalItemsTemplate><Badge Color="Color.Primary" TextSize="TextSize.Large">@context.TotalItems total items</Badge></TotalItemsTemplate>*@
                            <TotalItemsShortTemplate><Badge Color="Color.Primary">@context.TotalItems</Badge></TotalItemsShortTemplate>
                            @*                    <ItemsPerPageTemplate>
                                <div class="btn-group" role="group" aria-label="Basic example">
                                <button type="button" class="btn btn-outline-secondary">1</button>
                                <button type="button" class="btn btn-outline-secondary">1</button>
                                <button type="button" class="btn btn-outline-secondary">1</button>
                                <button type="button" class="btn btn-outline-secondary">@PageNumber</button>
                                <button type="button" class="btn btn-outline-secondary">3</button>
                                <button type="button" class="btn btn-outline-secondary">3</button>
                                <button type="button" class="btn btn-outline-secondary">3</button>
                                </div>
                                </ItemsPerPageTemplate>*@
                            <PageSelectorTemplate>
                                <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPage" Size="Size.Large">
                                    @for (int i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
                                    {
                                        var pageNumber = i;
                                        <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
                                    }
                                </Select>
                            </PageSelectorTemplate>
                            <PageSizesTemplate>
                                <Select TextColor="TextColor.Primary" @bind-SelectedValue="@context.CurrentPageSize" Size="Size.Small">
                                    @foreach (var curPageSize in context.PageSizes)
                                    {
                                        <SelectItem Value="@curPageSize">@curPageSize</SelectItem>
                                    }
                                </Select>
                            </PageSizesTemplate>
                        </DataGrid>
                    </div>
                </div>
            </div>
        </div>


    }
}

@inject IJSRuntime JS;
@implements IDisposable
@code {
    public List<string> LstDocNoMobileShow { get; set; }

    [CascadingParameter]
    public ErrorView? Error { get; set; }
    private MaterialReceivePlanMstModel selectedItem;

    protected override async void OnInitialized()
    {
        Console.WriteLine("Init State");
        //BaseStateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Console.WriteLine("Dispose State");
    }
    private async Task GetMaterialReceivePlanMstAsync()
    {
        await ViewModel.GetMaterialReceivePlanMstAsync(ViewModel.DateStart, ViewModel.DateEnd);
    }
    bool isGridDisabled = true; // Set this to true to disable row selection
    DataGrid<MaterialReceivePlanMstModel> dataGrid;

    void OnRowSelected(MaterialReceivePlanMstModel item)
    {
        if (isGridDisabled)
        {
            dataGrid.SelectedRow = null; // Clear the selected row if selection is disabled
            return;
        }

        selectedItem = item;
        // Handle row selection logic here
    }
}